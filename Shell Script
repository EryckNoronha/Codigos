## Curso Shell Script profissional: Do básico ao avançado - Módulo1: Comandos básicos do Shell.

> Material complementar do curso Shell Script profissional: Do básico ao avançado. Disponível no [Youtube](https://www.youtube.com/watch?v=HRRfgufskaw&list=PLLCFxfe9wkl-k0w-c_1i4sdZPUYt0Yc2P).

<img src="https://github.com/Geofisicando/Curso-Shell-Script-Profissional-mod-1/blob/master/Shell%20Script.png" width=1000>

Existem centenas de comandos no shell e cada um deles com mais uma dezena de opções.
Porém, alguns comandos são utilizados com muito mais frequência do que outros,
de modo que conhecendo apenas uma parte dos comandos disponíveis, você pode realizar a grande maioria das tarefas no seu sistema linux.

Neste módulo do curso nós iremos aprender os comandos básicos do terminal do Shell.

## Dependências

Este curso utiliza o shell Bash, acrônimo para "Bourne-Again SHell", que já vem instalado por padrão no Linux Ubuntu.

## Índice
> Este material de apoio está em manutenção, alguns recursos ainda não estão disponíveis.

## Exercícios: 
  - [Quiz 1](https://docs.google.com/forms/d/e/1FAIpQLSeRhTJ7btQdGyUAZDsmYNWl81Be-TYODKB6zBHiirLMN9XM6A/viewform?usp=sf_link)
  - [Quiz 2](https://docs.google.com/forms/d/e/1FAIpQLSfj5krskk4PfdUqodUuPoGs1pDMbdleEnGJMl8iHxfJHQmkNw/viewform?usp=sf_link)
 
 ## Introdução

   - Shell Script profissional Módulo 1 #0 - Introdução
   
     man comando: documentação do comando
     man -f comando: pequena descrição
     man -w comando: onde fica a documentação
     

## Fase 1

    Mod.1 #1 - Descobrindo o terminal
               Abrir o prompit --> Ctrl + Alt + T
               Nova aba no terminal --> Shift + Ctrl + T               
               
    Mod.1 #2 - Clear, Reset, Ctrl + L: Limpar a tela do terminal
    Mod.1 #3 - O que é shell? O que é shell script?

## Fase 2

    Mod.1 #4 - pwd: Obter o endereço do diretório atual no terminal
    Mod.1 #5 - cd: Alterar o diretório corrente no terminal
    
    Mod.1 #6 - ls: Exibir o conteúdo de um diretório no terminal
               ls -i: Exibi os inouds (numeros de registro dos documentos)
               ls *.mkv: Exibe todos os aquivos com a extenção colocada apos o ponto.
               ls -a : exibe arquivos ocultos (obs. todo arquivo que começa com ponto é um arquivo oculto)
               ls -l : exibe permições lista longa 
               
    Mod.1 #7 - echo: Exibir mensagens na tela do terminal, exibe variaveis.obs echo $eOnomeDaVariavel
               echo -e: interpreta caracteres especiais
               echo "prenchimento qualque" >> aquivo.txt : Vaicriar e adicionar o que está entre as aspas duplas no arqivo.txt
               echo "prenchimento qualque" > aquivo.txt: caso exita vai apagar e substituir
                   obs. cat + nomeArquivo.txt exibe o que tem no arquivo

## Fase 3

    Mod.1 #8 - chmod e ls: Alterar permissões de arquivos no linux
               chmod u=rwx nomeDoArquivo.txt obs u é de usuario, g= grupo e o=outros usuarios
             Permições do arquivo na consilta ls -l
             -rw- r-- r-- r=leitira w=escrita
             drwx r-x r-x tudo e d= diretorio e x=execução 
             
    Mod.1 #9 - basename: exibe nome do arquivo
               basename + $Nome da variavel + estenção do arquivo: retira a extenção do nome do arquivo
               dirname: exibe o caminho do aquivo
    
    Mod.1 #10 - history: Exibir o histórico de comandos
                tras numero do estorico dos comandos se colocar esclamação e numero do momando ele será executado
                ex. !1996
                    !! executa o ultimo comenado executado
                history | tail -5 : ultimas cinco linhas

## Fase 4

    Mod.1 #11 - mkdir: Criar diretórios 
                mkdir -p ./teste/teste2/teste3: cria um diretório dentro do outro 
                mktemp: cria arquivos temporários por padrão no no diretorio /tmp
                
    Mod.1 #12 - Árvore de diretórios no linux e revisão dos comandos
    
    
    Mod.1 #13 - Diretórios ponto: Abreviação do diretório atual
                     ponto-ponto: Diretório acima anterior

## Fase 5

    Mod.1 #14 - touch: Criar arquivos em branco vasio e arquivos ocultos
                touch .oculto.txt: o pnto na frente do arquivo cria arquivo oculto
                nautilus . &: abrir a pasta atual e o & significa que não ficará vinculado ao terminal
                            ctrl + h: habilita ou desabilita arquuivos ocultos dentro da janela com os aqruivos fora do terminal
                gedit .oculto.txt &: vai abrir o arquivo txt com o editor de texto fora do terminal
                
    Mod.1 #15 - mv: Mover arquivos, diretórios e renomear
                mv nomeDoArquivo.txt /diretorio: moverá para o diretorio
                mv diretorio/nomearquivo.txt . : move para o diretorio atual
                mv diretorio1/ diretorio2/ : move o diretorio1 para o diretorio2 
                mv diretorio2/diretorio1 . : volta para o diretorio atual            
   
    Mod.1 #16 - cp: Copiar arquivos e diretórios
                cp nomedo arquivo.txt diretorio/seQuiserNovoNome.txt: como o arquivo para outro diretório
                cp -r diretorio/diretorio2/: copia o diretorio obs. é necessário o -r copia diretorio por inteiro
    
    
    Mod.1 #17 - cat: Concatenar e exibir o conteúdo de arquivos
                cat arquivo1.txt arquivo2.txt: exibe os dois arquivos ao mesmo tempo
                cat arquivo1.txt arquivo2.txt >> arqConcatenado.txt: junta os dois arquivos e cria um novo com as duas informações
                cat -n arquivo1.txt: exibe o arquivo com o numero de linhas
                
    Mod.1 #18 - rm: Remover arquivos e diretórios
                rm -r diretorio/: remove o diretorio mesmo não estando vasio 
                rm -i arquivo.txt: recebe a confirmação se quer remover por conta do -i
                rm -i diretorio/*:  asterico representa todo conteudo do diretório- não remove a pasta mas remove os arquivos internos.               
                

## Fase 6

    Mod.1 #19 - pipe: Direcionar saídas e entradas dos comandos no shell
               \ : corta o comando em varias linhas
               / : representa o separador dos diretórios
               obs. bc -l: exibe calculadora do teminal -l é para fazer contas decimais
               echo "2+3" | bc -l: estabeleceu relação entre comandos
               cat <nomearquivo.txt >> aquivoNovo.txt : Esta direcionando o arquivo ao comando cat e salvando
               
    Mod.1 #20 - cut: Filtrar saídas do comando cat e arquivos csv
                echo "eryck" | cur -c1: seleciona o primeiro caracter "e"
                echo "eryck" | cur -c2-4: seleciona "ryc"
                echo -e "1,2,3\n4,5,6\n7,8,9" >> matriz.csv: \n oula linha, criando um arquivo csv
                cat matriz.csv | cut -d"," -f1: -d é o delimitador e -f1 é a primeira coluna
                
             
    Mod.1 #21 - head: Exibir as primeiras linhas de arquivos
                head -n 15 nomeDoarquivo.txt: exibe as 15 primeiras linhas  
                head -n 5 arquivo1.txt arquivo2.txt : exibe cinco primeiras linhas dos sois arquivos
    
    Mod.1 #22 - tail: Exibir as últimas linhas de arquivos
                tail -n 15 nomeDoarquivo.txt: exibe as 15 ultimas linhas    
    
    Mod.1 #23 - tail -f: Monitorar arquivos com o comando tail -f obs. ctrl + c fecha o monitoramento
                obs. abre novo terminal que atualisa toda vez que insere no arquivo
                sleep 5; echo "texto inserido" >> nomeDoarquivo.txt: ponto e virgula executa dois comando ao mesmo tempo

## Fase 7

    Mod.1 #24 - seq: Exibir sequências de números e laços de repetição
                seq 0 2 10 - significa que vai iniciar com zero, vai pular de dois em dois até dez
                
    Mod.1 #25 - wc: Exibir número de linhas, palavras e caracteres de arquivo
                wc -l texto.txt: somente numero de linhas
                wc -w texto.txt: somente numero de palavras
                wc -m texto.txt: somente numero de caracteres
    
    Mod.1 #26 - tee: Gerar arquivos de log das saídas de um pipe
                echo "1,2,3" | tee log.txt | wc -> o comando tee guardou a variavel de log no arquivo log.txt e o comando rodou normal 
                obs. por padrão subescreve 
                echo "1,2,3" | tee -a log.txt | wc -> -a é a flag de append adiciona o log na ultima linha
    
    Mod.1 #27 - date (Parte 1): Exibir data e hora local em formato específico
                obs baseado no tempo UTC
                data -u mostra a hora UTC
                data -d today: data hoje
                data -d tomorrow: data amanha
                data -d yesterday: data ontem
                data -d "2 days ago": data dois dias atras
                data -d "5 weeks": cinco semanas para frente
                
                obs. outras formas de expresar as datas
                data +%d/%m/%y - o simbulo % indica que o caracter é um descritor de formato
Alguns formatos usados pelo comando:
%A : dia da semana (domingo, …, sábado).
%B : nome do mês (janeiro, …, dezembro).
%H : hora do dia (0 a 23).
%M : minuto (0 a 59).
%S : segundos (0 a 61).
%T : hora no formato hh:mm:ss.
%Y : ano.
%a : dia da semana abreviado (dom, …, sab).
%b : nome do mês abreviado (jan, …, dez).
%c : dia da semana, data e hora.
%d : dia do mês.
%j : dia ano (1 a 366).
%m : mês (1 a 12).
%s : número de segundos desde das zero horas de 01/01/1970.
%w : dia da semana, onde 0 = domingo, 1 = segunda, …, 6 = sábado.
%x : representação da data local.
%y : os dois últimos dígitos do ano    
    
    Mod.1 #28 - date (Parte 2): Mais sobre descritores de formato
                data +%d%t%m%t%Y - a letra t representa um espaço de tab
                data +%d%n%m%n%Y - a letra n representa quebra de linha
                                

## Fase 8

    Mod.1 #29 - rev: Reverter sequências de caracteres
                vi nomeArquivo.txt : abre o editor de texto no arquivo obs. sair e salvar-:wq  
    
    Mod.1 #30 - paste: Concatenar arquivos por colunas
                paste documento1.txt documento2.txt -d; -> os dois arquivos serão concatenados por coluna e separados por ponto e virgula
                paste documento1.txt documento2.txt -d"\n" -> vai pular linhas
                paste documento1.txt documento2.txt -d; >> cadastro.csv -> salvando em um novo documento
       
    Mod.1 #31 - cal: Exibir o calendário na tela do terminal
                cal -3: mostra 3 calendarios
                cal -y: calendario completo do ano
                cal -y 2024: mostra o calendario do ano identificado
                cal -m 2: o numero representa o mes neste caso fevereiro
                man cal: abre o manual obs para sair apreta q                
    
    
    Mod.1 #32 - sort (Parte 1): Organizar lista em ordem alfabética e numérica
                sort -u: remove duplicados
                
    Mod.1 #33 - sort (Parte 2): Organizar lista por coluna e na ordem inversa
                sort -k2 arquivo.txt : -k é para escolher a coluna que vai ordenar o 2 é o numero da coluna
                sort -r: -r coloca em ordem inversa
    
    Mod.1 #34 - sort (Parte 3): Organizar lista grande de arquivos por coluna
                sort -t"-" -k3 -n arquivo.txt: -t é o delimitador e n é para organizar numericamente

## Fase 9

    Mod.1 #35 - xargs: Executar comandos em loop sem usar laços
                echo "1 2 3 4 5 6" | xargs -n 3 : vai juntar de tres em tres e pular linha
                xargs -a nomeArquivo.txt -n2 : separa duas colunas por espaço em branco
                echo "um dois tres" | xargs mkdir: cria tres diretorios em sequencia
                echo "um dois tres" | xargs -t rm -r: remove os tres diretoris criados
                obs -p perdgunta se quer condinuar o loop de comandos
                
                echo -e "um\ndois\ntres" | xargs \
                -I % -p bash -c 'touch %.txt' : percorre as instrings -I para colocar o caracter de substituição chama o bach para criar o arquivo
                que reseberá o nome no lugar da %, -c ler a partir de uma string de comando  
                
                ls -1 | xargs \
                -I % -p bash -c 'rm %' : vai remover perguntando sobre os arquivos
                
                
    
    Mod.1 #36 - sed (Parte 1): Editor de fluxo de texto do terminal
    
                30 exemplos do comando sed -com regex
                https://terminalroot.com.br/2015/07/30-exemplos-do-comando-sed-com-regex.html
                
                sed -n '1p' texto.txt : -n para imnprimmir só o resultado, 1 é a linha e p é de print
                sed -n '/palavra/p' texto.txt: vai buscar a palavra entre as barras
                sed -n '1,3p' texto.txt: imprime o intervalo da linha um a tres
                ^ simbulo para marcar o comerço da frase
                $ simbulo para marcar o final da frase
                  Ex. sed -n '/e$/p' texto.txt: todas as frases que terminarem com a letra 'e' vão ser printadas
                      sed -n '/^o/p' texto.txt: todas as frases que começam com a letra 'o' vão ser printadas
                      obs. é casesencitive             
                
    Mod.1 #37 - sed (Parte 2): Substituir uma string por outra
                sed -i 's/texto1/texto2/' texto.txt: -i é para substituir no arquico, 's' é de substituição, vai substituir o texto1 para o texo2
                sed -i 's/texto1/texto2/;s/texto3/texto4/' texto.txt: faz trocas simultanias 
                sed -i '3,5s/^/#/' texto.txt : insere no intervalo da terceira linha à aquinta coloca # que é o caracter de comentario
                sed -i 'palavra/s/$/o que vai inserir/' texto.txt : ao invez de colocar o numero da linha coloca a palavra que identiufica a frase
                e insere no final demostrando com caraquiter $.
                    
    Mod.1 #38 - sed (Parte 3): Deletar linhas e strings de arquivo de texto
                sed -i 's/palavra//g' texto.txt: o g força fazer em todas as ocorrencias da linha. no exemplo esta substituindo por nada   
                sed -i '/^\*/d' texto.txt: ^ indica que esta no comerço da linha, \* para ler literalmente o simbulo, 'd' para deletar
                então vai deletar todas as linhas que começam com *
                sed -i '6d' texto.txt: deleto a linha 6
                

## Fase 10

    Mod.1 #39 - grep (Parte 1): Pesquisar strings em arquivo de texto
                grep -n PALAVRA texto.txt: vai buscar a palavra no arquivo e printar as linhas com o numero de linha
                grep -v PALAVRA texto.txt: vai as linhas que não tem a PALAVRA e printar tudo
                grep -c PALAVRA texto.txt: conta o numero de linhas que aparece a PALAVRA                
    
    Mod.1 #40 - grep (Parte 2): Exibir o contexto de pesquisa
                grep -B 2 "palavra ou texto" texto.txt: -B é para mostrar as linhas anteriores, 2 é a quantidade de linhas que vai mostrar
                grep -A 2 "palavra ou texto" texto.txt: -A é para mostrar as linhas depois, 2 é a quantidade de linhas que vai mostrar
                grep -C 2 "palavra ou texto" texto.txt: -C é para mostrar as linhas antes e depois, 2 é a quantidade de linhas que vai mostrar
                obs. para saber se o comando foi bem sucedido faço:
                echo $? : se retornar 0 é por que o comando anterior foi bem sucedido
                   
    Mod.1 #41 - tree: Lista hierárquica de diretórios em formato de árvore
                
                para instalar:
                sudo apt-get install tree
                
                tree diretorio/ -o novodocumento.txt: vai salvar a arvore de pastas em um arquivo             
                
## Fase 11

   Mod.1 #42 - ln: Como criar links simbólicos e hardlinks em shell
   * O link simbolico vai ser um atalho para um arquivo original os inodes serão diferentes
   * inode: numero do arquivo
   * alterando o link simbolico altera o arquivo original
   * se o arquivo original for excluido o link é quebrado
   
               ln -s pasta1/pasta2/arquivo/arq.txt linkSimbolico: -s dis que é simbólico, passo o caminho do arquio e depois o nome do link simbolico que eu quero
               file linkSimbolico: mostra o tipo do arquivo
               ln pasta1/pasta2/arquivo/arq.txt hardlink: sem o 's' faz um hardilink, o inode será igual ele será um ponteiro para o arquivo original
               caso o original for excluido o hard link não será quebrado.
    
   Mod.1 #43 - Utilizando links simbólicos como referência à uma biblioteca
   
               criar o aquivo de função
               vi lib1.0.sh : vi é o editor de texto e a estenção sh é é para criar biblioteca de função
                    :wq - sair e salvar do editor vi
                    chmod +x lib1.0.sh: dá permição de executar
                    ./lib1.0.sh: executa o arquivo
               vi man.sh: cria a função principal
                    ./diretorio/lib1.0.sh : escr5ito dentro de man.sh vai executar a bibilote lib1.0.sh
                    
               fazer um link simbolico na man faz com que para alterar a bibilioteca só apontar o link da man para nova biblioteca    
               ln -s lib/lib1.0.sh link_lib: cria um link simbolico para ser chamado na função man com ./link_lib
               
               ln -s -f lib/lib2.0.sh link_lib: o link simbolico vai apontar para nova biblioteca sendo forrçado com -f
               
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

INTERMEDIARIO

Aula 1: Executar comando em um documento Script
        touch taxto.sh -> .sh é um arquivo shell script 
        gedit texto.sh & -> editor de texto para acessar o arquivo, & é para continuar utilizando o terminal
           #!/bin/bash -> (shebang) no inicio do documento para dizer quem vai interpretar o comnado que no caso é o sell bash que está dentro da pasta bin
           echo "Olá Mundo!" - dentro do documento para teste
           antes de executar tenho que dar permição
           chmod 777 texto.sh -> 777 dá todas as permições, a permissão é apenas uma vez
           ./texto.sh -> executa o arquivo
           
           
           
Aula 2: read: comando para escrever na variável
        read X: vai esperar eu atribuir o valor para a variavel X
        read -p "Digite seu nome" NOME: vai aparecer a frase esperando o valor para variavel NOME
        _______________________________________   
           Programa para documento script:
           
           echo "Bem vindo ao programa!"
           
           read -p "Digite seu nome" NOME
           
           echo "$NOME, Bem vindo!"
       ________________________________________
       
Aula 4:  Calculadora Idade data
criar arquivo: touch calculado_idade.sh
        !/bin/bash

        read -p "Digite seu nome " NOME
        read -p "Digite a data de nascimento (DD/MM/AAAA) " DATA

        ANO_NAC=$(echo $DATA | cut -d"/" -f3)
        ANO_HJ=$(date +%Y)
        IDADE=$(echo "$ANO_HJ-$ANO_NAC" | bc -l)

        echo "Olá $NOME"
        echo "Sua idade é $IDADE"

Aula 5: Expanção de variavel 

      var="Eryck de Noronha"
      echo ${var:8} #mostra depois da posição 8
      Noronha      
      echo ${#var} #conta quatas letras
      16
      echo ${var:0:5} #Busca intervalo
      Eryck
      echo ${var/de/''} #Subistitui
      Eryck Noronha
      cho ${var// /} #Tira todos os espaços em branco
      obs. // em todas as ocorrencias
      
      file="arquivo.txt"
      echo ${file##*.} tira tudo da variavel antes do ponto
      txt   
      file="arquivo.txt"
      echo ${file%%.*} tira tudo da variavel depois do ponto
      arquivo
      echo ${file~}iverte a primeira letra se for minuscula fica maiuscula
      Arquivo.txt
      echo ${file^^}Tudo fica maiusculo
      
      Variavel vazia ou comvalor
       echo ${variavel:- esta variavel está vazia} o sinal de - depois do : imprime a mensagem caso vazia
       echo ${variavel:+ esta variavel tem valor} o sinal de + depois do : imprime caso esteja com valor
       echo ${variavel:= valor padrão} o sinal de = depois do : insere um valor padrão
       

Aula 7: exibir erro caso não complete
        
        read -p "Digite seu nome " NOME
        echo "Nome cadastrado: ${NOME:?Usuário não forneceu o nome\!" ----> linha para adicionar o erro
        read -p "Digite a data de nascimento (DD/MM/AAAA) " DATA
        echo "Data nac: ${DATA:?Usuário não forneceu a data de nascimento\!" ----> linha para adicionar o erro

        ANO_NAC=${DATA##*/} --> O simbulo # apaga tudo que vem antes de / então só vai sobrar o ano
        ANO_HJ=$(date +%Y)
        IDADE=$(echo "$ANO_HJ-$ANO_NAC" | bc -l)

        echo "Olá $NOME"
        echo "Sua idade é $IDADE"
     
Aula 8: Condicional if

       read -p "Deseja exibir uma mensagem? (y/n)" RESPOSTA
       MENSAGEM="Olá usuario, tudo bem?"

 
       if [ "$RESPOSTA" = "y" ]
       then
             echo "MENSAGEM"
       fi
       obs. fi é para terminar o comando if.
       
Aula 9: Resumo condicionais no Shell
        Comparação de strings:
        = (Verificar igualdade)

        != (Verificar se é diferente)

        -n (Verifificar se é não nula)

        -z (Verificar se é nula)

        Comparação numérica:
        -lt ( < Menor)

        -gt ( > Maior)

        -le ( <= Menor ou igual)

        -ge ( >= Maior ou igual)

        -eq ( = Igual)

        -ne (!= Diferente)


       
       
       
